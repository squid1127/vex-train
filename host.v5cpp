{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftMotorMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorMotorB = motor(PORT11, ratio18_1, false);\nmotor_group leftMotor = motor_group(leftMotorMotorA, leftMotorMotorB);\n\nmotor rightMotorMotorA = motor(PORT2, ratio18_1, false);\nmotor rightMotorMotorB = motor(PORT12, ratio18_1, false);\nmotor_group rightMotor = motor_group(rightMotorMotorA, rightMotorMotorB);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       squid1127                                                 */\n/*    Created:      Apr 30, 2                                                 */\n/*    Description:  Host brain code for drivetrain sync                       */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Configure VEX Link\nvex::message_link client01( PORT3, \"train_01\", linkType::manager ); // Client 01\nvex::message_link client02( PORT3, \"train_02\", linkType::manager ); // Client 02\n\n\n// print status to controller\nvoid printStatus() {\n  Controller1.Screen.clearScreen();\n\n  // loop ;)\n  while (true) {\n    Controller1.Screen.setCursor(1, 1);\n\n    // Client 01\n\n    // Radio connected?\n    if (client01.isReceiving()) {\n      Controller1.Screen.print(\"01: Receiving\"); \n    } else if (client01.isLinked()) {\n      Controller1.Screen.print(\"01: Connected\"); \n    } else if (client01.installed()) {\n      Controller1.Screen.print(\"01: No Client\"); \n    }else {\n      Controller1.Screen.print(\"01: No Radio\"); \n    }\n\n    Controller1.Screen.setCursor(1, 2);\n\n    if (client02.isReceiving()) {\n      Controller1.Screen.print(\"02: Receiving\"); \n    } else if (client02.isLinked()) {\n      Controller1.Screen.print(\"02: Connected\"); \n    } else if (client02.installed()) {\n      Controller1.Screen.print(\"02: No Client\"); \n    }else {\n      Controller1.Screen.print(\"02: No Radio\"); \n    }\n\n    // wait 20 ms\n    wait(5, msec);\n  }\n}\n\nint main() {\n  int driveVel = 0;\n  int driveSteer = 0;\n\n  while(true){\n    // get controller position\n    driveVel = Controller1.Axis3.position();\n    driveSteer = Controller1.Axis4.position();\n\n    // send drive command with speed\n    client01.send(\"drive\", driveVel);\n    client02.send(\"drive\", driveVel);\n\n\n    // update speeds on own motors (could support 6-wheel drive =0)\n    leftMotor.setVelocity((driveVel + driveSteer), percent);\n    rightMotor.setVelocity((driveVel - driveSteer), percent);\n    leftMotor.spin(forward);\n    rightMotor.spin(forward);\n\n    // wait for good measure\n    wait(5, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,11],"name":"leftMotor","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[2,12],"name":"rightMotor","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}